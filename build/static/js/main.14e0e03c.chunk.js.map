{"version":3,"sources":["components/card.jsx","components/card-list.jsx","components/search-box.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","onChangeHandler","type","onChange","App","useState","setMonsters","searchField","setSearchField","useEffect","a","fetch","resp","json","fetchData","filteredMonsters","filter","toLowerCase","includes","e","target","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"ySAYeA,EAXF,SAACC,GACZ,OAAO,sBAAKC,UAAU,iBAAf,UACL,qBACEC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,0BACHC,IAAI,YAEN,6BAAKL,EAAMG,QAAQG,OACnB,4BAAIN,EAAMG,QAAQI,YCKPC,G,MAVE,SAACR,GAChB,OACE,qBAAKC,UAAU,YAAf,SACGD,EAAMS,SAASC,KAAI,SAACP,GAAD,OAClB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCCZO,G,MANG,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,YAAaC,EAAsB,EAAtBA,gBAChC,OACE,uBAAOZ,UAAU,SAASa,KAAK,SAASF,YAAaA,EAAaG,SAAUF,M,MC4BjEG,MA3Bf,WAAgB,IAAD,EACmBC,mBAAS,IAD5B,mBACNR,EADM,KACIS,EADJ,OAEyBD,mBAAS,IAFlC,mBAENE,EAFM,KAEOC,EAFP,KAGbC,qBAAU,WAAM,4CACd,4BAAAC,EAAA,sEACqBC,MAAM,8CAD3B,cACQC,EADR,YAEEN,EAFF,SAEoBM,EAAKC,OAFzB,8EADc,uBAAC,WAAD,wBAKdC,KACC,IAEH,IAAMC,EAAmBlB,EAASmB,QAAO,SAACzB,GAAD,OACvCA,EAAQG,KAAKuB,cAAcC,SAASX,MAGtC,OACE,sBAAKlB,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,gBAAiB,SAACkB,GAAD,OAAOX,EAAeW,EAAEC,OAAOC,UAElD,cAAC,EAAD,CAAUxB,SAAUkB,QCfXO,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14e0e03c.chunk.js","sourcesContent":["import \"./card.css\";\r\nconst Card = (props) => {\r\n  return <div className=\"card-container\">\r\n    <img\r\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\r\n      alt=\"monster\"\r\n    />\r\n    <h2>{props.monster.name}</h2>\r\n    <p>{props.monster.email}</p>\r\n  </div>;\r\n};\r\n\r\nexport default Card;\r\n","import Card from './card'\r\nimport \"./card-list.css\";\r\n\r\nconst CardList = (props) => {\r\n  return (\r\n    <div className=\"card-list\">\r\n      {props.monsters.map((monster) => (\r\n        <Card key={monster.id} monster={monster} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CardList;\r\n","import \"./search-box.css\";\r\n\r\nconst SearchBox = ({ placeholder, onChangeHandler }) => {\r\n  return (\r\n    <input className='search' type=\"search\" placeholder={placeholder} onChange={onChangeHandler} />\r\n  );\r\n};\r\n\r\nexport default SearchBox;\r\n","import { useState, useEffect } from \"react\";\nimport CardList from \"./components/card-list\";\nimport SearchBox from \"./components/search-box\";\nimport \"./App.css\";\n\nfunction App() {\n  const [monsters, setMonsters] = useState([]);\n  const [searchField, setSearchField] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const resp = await fetch(\"https://jsonplaceholder.typicode.com/users\");\n      setMonsters(await resp.json());\n    }\n    fetchData();\n  }, []);\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField)\n  );\n\n  return (\n    <div className=\"App\">\n      <h1> Monsters Rolodex </h1>\n      <SearchBox\n        placeholder=\"search monsters\"\n        onChangeHandler={(e) => setSearchField(e.target.value)}\n      />\n      <CardList monsters={filteredMonsters} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}